{
	"deploy": {
		"VM:-": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"main:1": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"ropsten:3": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"rinkeby:4": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"kovan:42": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"g√∂rli:5": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"Custom": {
			"linkReferences": {},
			"autoDeployLib": true
		}
	},
	"data": {
		"bytecode": {
			"generatedSources": [],
			"linkReferences": {},
			"object": "6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220fd857823abd2faf9bee420c295aeead313d09d250ffd7e8c6ae8f29ca87cae8b64736f6c63430007060033",
			"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT DUP6 PUSH25 0x23ABD2FAF9BEE420C295AEEAD313D09D250FFD7E8C6AE8F29C 0xA8 PUSH29 0xAE8B64736F6C6343000706003300000000000000000000000000000000 ",
			"sourceMap": "8647:1949:0:-:0;;;;;;;;;;;;;;;;;;;"
		},
		"deployedBytecode": {
			"generatedSources": [],
			"immutableReferences": {},
			"linkReferences": {},
			"object": "6080604052600080fdfea2646970667358221220fd857823abd2faf9bee420c295aeead313d09d250ffd7e8c6ae8f29ca87cae8b64736f6c63430007060033",
			"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT DUP6 PUSH25 0x23ABD2FAF9BEE420C295AEEAD313D09D250FFD7E8C6AE8F29C 0xA8 PUSH29 0xAE8B64736F6C6343000706003300000000000000000000000000000000 ",
			"sourceMap": "8647:1949:0:-:0;;;;;"
		},
		"gasEstimates": {
			"creation": {
				"codeDepositCost": "12600",
				"executionCost": "66",
				"totalCost": "12666"
			},
			"internal": {
				"addThenSubUInt(uint256,uint256,uint256)": "infinite",
				"addUInt(uint256,uint256)": "infinite",
				"divUInt(uint256,uint256)": "infinite",
				"mulUInt(uint256,uint256)": "infinite",
				"subUInt(uint256,uint256)": "infinite"
			}
		},
		"methodIdentifiers": {}
	},
	"abi": []
}